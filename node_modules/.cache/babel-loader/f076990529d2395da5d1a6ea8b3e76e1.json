{"ast":null,"code":"var _jsxFileName = \"/Users/cosimoranieri/Desktop/Foody/src/components/CheckoutForm.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport useInput from \"../hooks/use-input\"; //Create a generic custom hook that takes the validation function as argument\n//Return inputIsValid, inputRef\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CheckoutForm = props => {\n  _s();\n\n  const nameRef = useRef(null);\n  const {\n    inputIsValid: nameIsValid,\n    inputValueIsValid: inputNameIsValid\n  } = useInput(nameRef.current, value => value.trim().length !== 0); //const nameRef = useRef();\n\n  const surnameRef = useRef();\n  const addressRef = useRef(); //const [nameIsValid, setNameIsValid] = useState(true);\n\n  const [surnameIsValid, setSurnameIsValid] = useState(true);\n  const [addressIsValid, setAddressIsValid] = useState(true);\n\n  const submitFormHandler = event => {\n    event.preventDefault(); //const enteredName = nameRef.current.value;\n\n    const enteredSurname = surnameRef.current.value;\n    const enteredAddress = addressRef.current.value; //const inputNameIsValid = enteredName.trim().length !== 0;\n\n    const inputSurnameIsValid = enteredSurname.trim().length !== 0;\n    const inputAddressIsValid = enteredAddress.trim().length === 6; //setNameIsValid(inputNameIsValid);\n\n    setSurnameIsValid(inputSurnameIsValid);\n    setAddressIsValid(inputAddressIsValid);\n    const formIsValid = inputNameIsValid && inputSurnameIsValid && inputAddressIsValid;\n\n    if (!formIsValid) {\n      console.log(\"form validity: form is not valid\");\n      return;\n    } else {\n      console.log(\"enteredName\", enteredSurname, enteredAddress);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitFormHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameRef,\n        type: \"text\",\n        id: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), !nameIsValid && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A field cannot me empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"surname\",\n        children: \"Surname\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: surnameRef,\n        type: \"text\",\n        id: \"surname\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), !surnameIsValid && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A field cannot me empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"\",\n        children: \"Postcode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: addressRef,\n        type: \"text\",\n        id: \"address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), !addressIsValid && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"must be 6 characters long!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: props.onCancel,\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CheckoutForm, \"qWelO6rRGq1Rhl2lbZARRuhWMVY=\", false, function () {\n  return [useInput];\n});\n\n_c = CheckoutForm;\nexport default CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/Users/cosimoranieri/Desktop/Foody/src/components/CheckoutForm.js"],"names":["useRef","useState","useInput","CheckoutForm","props","nameRef","inputIsValid","nameIsValid","inputValueIsValid","inputNameIsValid","current","value","trim","length","surnameRef","addressRef","surnameIsValid","setSurnameIsValid","addressIsValid","setAddressIsValid","submitFormHandler","event","preventDefault","enteredSurname","enteredAddress","inputSurnameIsValid","inputAddressIsValid","formIsValid","console","log","onCancel"],"mappings":"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","sourcesContent":["import { useRef, useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n//Create a generic custom hook that takes the validation function as argument\n//Return inputIsValid, inputRef\nconst CheckoutForm = (props) => {\n  const nameRef = useRef(null);\n  const {\n    inputIsValid: nameIsValid,\n    inputValueIsValid: inputNameIsValid,\n  } = useInput(nameRef.current, (value) => value.trim().length !== 0);\n\n  //const nameRef = useRef();\n  const surnameRef = useRef();\n  const addressRef = useRef();\n  //const [nameIsValid, setNameIsValid] = useState(true);\n  const [surnameIsValid, setSurnameIsValid] = useState(true);\n  const [addressIsValid, setAddressIsValid] = useState(true);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    //const enteredName = nameRef.current.value;\n    const enteredSurname = surnameRef.current.value;\n    const enteredAddress = addressRef.current.value;\n\n    //const inputNameIsValid = enteredName.trim().length !== 0;\n    const inputSurnameIsValid = enteredSurname.trim().length !== 0;\n    const inputAddressIsValid = enteredAddress.trim().length === 6;\n\n    //setNameIsValid(inputNameIsValid);\n    setSurnameIsValid(inputSurnameIsValid);\n    setAddressIsValid(inputAddressIsValid);\n\n    const formIsValid =\n      inputNameIsValid && inputSurnameIsValid && inputAddressIsValid;\n\n    if (!formIsValid) {\n      console.log(\"form validity: form is not valid\");\n      return;\n    } else {\n      console.log(\"enteredName\", enteredSurname, enteredAddress);\n    }\n  };\n\n  return (\n    <form onSubmit={submitFormHandler}>\n      <div>\n        <label htmlFor=\"name\">Name</label>\n        <input ref={nameRef} type=\"text\" id=\"name\"></input>\n        {!nameIsValid && <p>A field cannot me empty</p>}\n      </div>\n      <div>\n        <label htmlFor=\"surname\">Surname</label>\n        <input ref={surnameRef} type=\"text\" id=\"surname\"></input>\n        {!surnameIsValid && <p>A field cannot me empty</p>}\n      </div>\n      <div>\n        <label htmlFor=\"\">Postcode</label>\n        <input ref={addressRef} type=\"text\" id=\"address\"></input>\n        {!addressIsValid && <p>must be 6 characters long!</p>}\n      </div>\n      <button>Submit</button>\n      <button type=\"button\" onClick={props.onCancel}>\n        Cancel\n      </button>\n    </form>\n  );\n};\n\nexport default CheckoutForm;\n"]},"metadata":{},"sourceType":"module"}
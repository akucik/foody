{"ast":null,"code":"var _jsxFileName = \"/Users/cosimoranieri/Desktop/Foody/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\n// import { useState } from \"react\";\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\"; // - find the index of the item with the name of the item we are adding\n// - fetch the item by index and change the amount\n// - return an updated array with the updated item\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CartProvider = props => {\n  _s();\n\n  const defaultCartState = {\n    items: [],\n    totalAmount: 0\n  };\n\n  const cartReducer = (state, action) => {\n    if (action.identifier === \"ADD\") {\n      const existingItemIndex = state.items.findIndex(item => item.name === action.item.name);\n      const existingItem = state.items[existingItemIndex];\n      let updatedItems;\n\n      if (existingItem) {\n        const updatedItem = { ...existingItem,\n          amount: existingItem.amount + action.item.amount\n        };\n        updatedItems = state.items;\n        updatedItems[existingItemIndex] = updatedItem;\n        console.log(state.items);\n        console.log(updatedItems);\n      } else {\n        updatedItems = state.items.concat(action.item);\n      }\n\n      return {\n        items: updatedItems,\n        totalAmount: state.totalAmount + 1\n      };\n    }\n\n    return defaultCartState;\n  };\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemHandler = item => {\n    dispatchCartAction({\n      identifier: \"ADD\",\n      item: item\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemHandler\n  }; // const [cartState, setCartState] = useState({\n  //   items: [],\n  //   totalAmount: 0,\n  // });\n  // const addItemHandler = (item) => {\n  //   console.log(\"calling add item\");\n  //   setCartState({\n  //     items: cartState.items.concat(item),\n  //     totalAmount: cartState.totalAmount + 1,\n  //   });\n  // };\n  // const cartContext = {\n  //   items: cartState.items,\n  //   totalAmount: cartState.totalAmount,\n  //   addItem: addItemHandler,\n  // };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/cosimoranieri/Desktop/Foody/src/store/CartProvider.js"],"names":["useReducer","CartContext","CartProvider","props","defaultCartState","items","totalAmount","cartReducer","state","action","identifier","existingItemIndex","findIndex","item","name","existingItem","updatedItems","updatedItem","amount","console","log","concat","cartState","dispatchCartAction","addItemHandler","cartContext","addItem","children"],"mappings":";;;AAAA;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;AACA;AACA;;;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAMC,gBAAgB,GAAG;AACvBC,IAAAA,KAAK,EAAE,EADgB;AAEvBC,IAAAA,WAAW,EAAE;AAFU,GAAzB;;AAKA,QAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,QAAIA,MAAM,CAACC,UAAP,KAAsB,KAA1B,EAAiC;AAC/B,YAAMC,iBAAiB,GAAGH,KAAK,CAACH,KAAN,CAAYO,SAAZ,CACvBC,IAAD,IAAUA,IAAI,CAACC,IAAL,KAAcL,MAAM,CAACI,IAAP,CAAYC,IADZ,CAA1B;AAIA,YAAMC,YAAY,GAAGP,KAAK,CAACH,KAAN,CAAYM,iBAAZ,CAArB;AACA,UAAIK,YAAJ;;AACA,UAAID,YAAJ,EAAkB;AAChB,cAAME,WAAW,GAAG,EAClB,GAAGF,YADe;AAElBG,UAAAA,MAAM,EAAEH,YAAY,CAACG,MAAb,GAAsBT,MAAM,CAACI,IAAP,CAAYK;AAFxB,SAApB;AAIAF,QAAAA,YAAY,GAAGR,KAAK,CAACH,KAArB;AAEAW,QAAAA,YAAY,CAACL,iBAAD,CAAZ,GAAkCM,WAAlC;AAEAE,QAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACH,KAAlB;AACAc,QAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AACD,OAXD,MAWO;AACLA,QAAAA,YAAY,GAAGR,KAAK,CAACH,KAAN,CAAYgB,MAAZ,CAAmBZ,MAAM,CAACI,IAA1B,CAAf;AACD;;AAED,aAAO;AACLR,QAAAA,KAAK,EAAEW,YADF;AAELV,QAAAA,WAAW,EAAEE,KAAK,CAACF,WAAN,GAAoB;AAF5B,OAAP;AAID;;AACD,WAAOF,gBAAP;AACD,GA7BD;;AA8BA,QAAM,CAACkB,SAAD,EAAYC,kBAAZ,IAAkCvB,UAAU,CAChDO,WADgD,EAEhDH,gBAFgD,CAAlD;;AAKA,QAAMoB,cAAc,GAAIX,IAAD,IAAU;AAC/BU,IAAAA,kBAAkB,CAAC;AAAEb,MAAAA,UAAU,EAAE,KAAd;AAAqBG,MAAAA,IAAI,EAAEA;AAA3B,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAMY,WAAW,GAAG;AAClBpB,IAAAA,KAAK,EAAEiB,SAAS,CAACjB,KADC;AAElBC,IAAAA,WAAW,EAAEgB,SAAS,CAAChB,WAFL;AAGlBoB,IAAAA,OAAO,EAAEF;AAHS,GAApB,CA7C8B,CAmD9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACGtB,KAAK,CAACwB;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAzED;;GAAMzB,Y;;KAAAA,Y;AA0EN,eAAeA,YAAf","sourcesContent":["// import { useState } from \"react\";\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\n\n// - find the index of the item with the name of the item we are adding\n// - fetch the item by index and change the amount\n// - return an updated array with the updated item\n\nconst CartProvider = (props) => {\n  const defaultCartState = {\n    items: [],\n    totalAmount: 0,\n  };\n\n  const cartReducer = (state, action) => {\n    if (action.identifier === \"ADD\") {\n      const existingItemIndex = state.items.findIndex(\n        (item) => item.name === action.item.name\n      );\n\n      const existingItem = state.items[existingItemIndex];\n      let updatedItems;\n      if (existingItem) {\n        const updatedItem = {\n          ...existingItem,\n          amount: existingItem.amount + action.item.amount,\n        };\n        updatedItems = state.items;\n\n        updatedItems[existingItemIndex] = updatedItem;\n\n        console.log(state.items);\n        console.log(updatedItems);\n      } else {\n        updatedItems = state.items.concat(action.item);\n      }\n\n      return {\n        items: updatedItems,\n        totalAmount: state.totalAmount + 1,\n      };\n    }\n    return defaultCartState;\n  };\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n\n  const addItemHandler = (item) => {\n    dispatchCartAction({ identifier: \"ADD\", item: item });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemHandler,\n  };\n\n  // const [cartState, setCartState] = useState({\n  //   items: [],\n  //   totalAmount: 0,\n  // });\n  // const addItemHandler = (item) => {\n  //   console.log(\"calling add item\");\n  //   setCartState({\n  //     items: cartState.items.concat(item),\n  //     totalAmount: cartState.totalAmount + 1,\n  //   });\n  // };\n  // const cartContext = {\n  //   items: cartState.items,\n  //   totalAmount: cartState.totalAmount,\n  //   addItem: addItemHandler,\n  // };\n\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\nexport default CartProvider;\n"]},"metadata":{},"sourceType":"module"}